//Backend (Node.js)
//server.js

const express = require('express');
const axios = require('axios');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;
const WEATHER_API_KEY = process.env.WEATHER_API_KEY;
const WEATHER_API_URL = 'http://api.weatherapi.com/v1/forecast.json';

app.use(cors());
app.use(express.json());

app.get('/api/weather', async (req, res) => {
    const { location } = req.query;

    if (!location) {
        return res.status(400).json({ error: 'Location is required' });
    }

    try {
        const response = await axios.get(WEATHER_API_URL, {
            params: {
                key: WEATHER_API_KEY,
                q: location,
                days: 5
            }
        });

        res.json(response.data);
    } catch (error) {
        res.status(500).json({ error: 'Error fetching weather data' });
    }
});

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

//Frontend (ReactJS)
//App.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

const App = () => {
    const [location, setLocation] = useState('');
    const [weather, setWeather] = useState(null);

    const fetchWeather = async (loc) => {
        try {
            const response = await axios.get(`http://localhost:5000/api/weather`, {
                params: { location: loc }
            });
            setWeather(response.data);
        } catch (error) {
            console.error('Error fetching weather data', error);
        }
    };

    const handleSearch = () => {
        if (location) {
            fetchWeather(location);
        }
    };

    const detectLocation = () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                const { latitude, longitude } = position.coords;
                fetchWeather(`${latitude},${longitude}`);
            });
        }
    };

    useEffect(() => {
        detectLocation();
    }, []);

    return (
        <div className="app">
            <header className="app-header">
                <h1>Weather Forecast</h1>
                <div className="search-bar">
                    <input
                        type="text"
                        placeholder="Enter location"
                        value={location}
                        onChange={(e) => setLocation(e.target.value)}
                    />
                    <button onClick={handleSearch}>Search</button>
                </div>
                <button onClick={detectLocation}>Detect Location</button>
            </header>
            {weather && (
                <div className="weather-container">
                    <h2>{weather.location.name}, {weather.location.region}, {weather.location.country}</h2>
                    <div className="current-weather">
                        <h3>Current Weather</h3>
                        <p>{weather.current.temp_c}°C, {weather.current.condition.text}</p>
                    </div>
                    <div className="forecast">
                        <h3>5-Day Forecast</h3>
                        <div className="forecast-container">
                            {weather.forecast.forecastday.map((day) => (
                                <div key={day.date} className="forecast-day">
                                    <p>{day.date}</p>
                                    <p>{day.day.avgtemp_c}°C</p>
                                    <p>{day.day.condition.text}</p>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

//App.css

body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background: #f4f4f4;
    color: #333;
}

.app {
    text-align: center;
}

.app-header {
    background-color: #282c34;
    padding: 20px;
    color: white;
}

.search-bar {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

.search-bar input {
    padding: 10px;
    width: 200px;
    margin-right: 10px;
}

.search-bar button {
    padding: 10px 20px;
    background-color: #61dafb;
    border: none;
    cursor: pointer;
}

.weather-container {
    margin-top: 20px;
}

.current-weather, .forecast {
    margin: 20px 0;
}

.forecast-container {
    display: flex;
    justify-content: space-around;
}

.forecast-day {
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    background: #fff;
    width: 120px;
}

